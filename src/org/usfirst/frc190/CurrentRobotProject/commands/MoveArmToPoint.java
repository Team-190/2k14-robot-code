// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc190.CurrentRobotProject.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc190.CurrentRobotProject.Robot;
import org.usfirst.frc190.CurrentRobotProject.subsystems.Elevator;
/**
 *
 */
public class  MoveArmToPoint extends Command {
    
    private double setPoint = 1.0;
    private boolean setPointSetInCode = false;
    
    public MoveArmToPoint() {
        //Default constructor. Uses setpoint set in RobotBuilder.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elevator);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        setPointSetInCode = false;
    }
    
    public MoveArmToPoint(double armSetpoint) {
        //New constructor, allows us to pass setpoint in from other parts of the code.
        requires(Robot.elevator);
        setPoint = armSetpoint;
        setPointSetInCode = true;
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
        if(setPointSetInCode){
            Robot.elevator.enable();
            Robot.elevator.setSetpoint(setPoint); //Uses the setpoint that was passed in by another part of the code.
        }else{
            //Autogenerated code here in case we need to specify a default setpoint using Robotbuilder.
            // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZE
            Robot.elevator.enable();
            Robot.elevator.setSetpoint(1.0);
            // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZE
        }
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        
        if(Robot.elevator.lowerLimitSwitchPressed() || Robot.elevator.topLimitSwitchPressed()){
            return true; //Stop the command if one of the limit switches is hit.
        }
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ISFINISHED
        return Robot.elevator.onTarget();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ISFINISHED
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.elevator.disable();
        Robot.elevator.setElevatorMotor(0);
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
