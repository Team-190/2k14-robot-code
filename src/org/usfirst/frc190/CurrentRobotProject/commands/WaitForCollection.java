// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc190.CurrentRobotProject.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc190.CurrentRobotProject.Robot;
/**
 *
 */
public class  WaitForCollection extends Command {
    
    private double speed = .5;  //roller speed. test val of .5 
    private double timeout = -1; //-1 means no timeout.
    boolean timedOut = false;
    
    public WaitForCollection(double collectionTimeout) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        timeout = collectionTimeout;
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.collector);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    public WaitForCollection() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.collector);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
        if(timeout >= 0) setTimeout(timeout);
        Robot.collector.setRollerSpeed(speed);
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if(timeout >= 0) timedOut = isTimedOut();
        
        return (Robot.collector.isCollected() || timedOut); //Wait for the ball to hit the limit switch or for the command to timeout.
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.collector.stop();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() { 
        end();
    }
}
