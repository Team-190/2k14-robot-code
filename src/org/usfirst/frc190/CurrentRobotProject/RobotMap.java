// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc190.CurrentRobotProject;
    
import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainSpeedController1;
    public static SpeedController drivetrainSpeedController2;
    public static RobotDrive drivetrainRobotDrive2Motors;
    public static SpeedController drivetrainSpeedController3;
    public static SpeedController drivetrainSpeedController4;
    public static SpeedController drivetrainSpeedController5;
    public static SpeedController drivetrainSpeedController6;
    public static RobotDrive drivetrainRobotDrive4Motors;
    public static Encoder drivetrainQuadratureEncoder1;
    public static Encoder drivetrainQuadratureEncoder2;
    public static Ultrasonic drivetrainUltrasonicSensor;
    public static SpeedController collectorFeederMotor;
    public static DigitalInput collectorFeederLimitSwitch;
    public static Servo collectorServo;
    public static DigitalInput shooterTopLimitSwitch;
    public static DigitalInput shooterLowerLimitSwitch;
    public static DoubleSolenoid shooterDoubleSolenoid1;
    public static DoubleSolenoid shooterDoubleSolenoid2;
    public static DoubleSolenoid shooterDoubleSolenoid3;
    public static DigitalInput shooterReedSwitch1;
    public static DigitalInput shooterReedSwitch2;
    public static DigitalInput shooterReedSwitch3;
    public static DigitalInput shooterReedSwitch4;
    public static AnalogChannel shooterShooterPot;
    public static SpeedController shooterShooterMotor;
    public static Compressor pneumaticsCompressor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainSpeedController1 = new Victor(1, 3);
	LiveWindow.addActuator("Drivetrain", "Speed Controller 1", (Victor) drivetrainSpeedController1);
        
        drivetrainSpeedController2 = new Victor(1, 4);
	LiveWindow.addActuator("Drivetrain", "Speed Controller 2", (Victor) drivetrainSpeedController2);
        
        drivetrainRobotDrive2Motors = new RobotDrive(drivetrainSpeedController1, drivetrainSpeedController2);
	
        drivetrainRobotDrive2Motors.setSafetyEnabled(true);
        drivetrainRobotDrive2Motors.setExpiration(0.1);
        drivetrainRobotDrive2Motors.setSensitivity(0.5);
        drivetrainRobotDrive2Motors.setMaxOutput(1.0);
        
        drivetrainSpeedController3 = new Victor(1, 5);
	LiveWindow.addActuator("Drivetrain", "Speed Controller 3", (Victor) drivetrainSpeedController3);
        
        drivetrainSpeedController4 = new Victor(1, 6);
	LiveWindow.addActuator("Drivetrain", "Speed Controller 4", (Victor) drivetrainSpeedController4);
        
        drivetrainSpeedController5 = new Victor(1, 7);
	LiveWindow.addActuator("Drivetrain", "Speed Controller 5", (Victor) drivetrainSpeedController5);
        
        drivetrainSpeedController6 = new Victor(1, 8);
	LiveWindow.addActuator("Drivetrain", "Speed Controller 6", (Victor) drivetrainSpeedController6);
        
        drivetrainRobotDrive4Motors = new RobotDrive(drivetrainSpeedController3, drivetrainSpeedController4,
              drivetrainSpeedController5, drivetrainSpeedController6);
	
        drivetrainRobotDrive4Motors.setSafetyEnabled(true);
        drivetrainRobotDrive4Motors.setExpiration(0.1);
        drivetrainRobotDrive4Motors.setSensitivity(0.5);
        drivetrainRobotDrive4Motors.setMaxOutput(1.0);
        drivetrainQuadratureEncoder1 = new Encoder(1, 2, 1, 3, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Quadrature Encoder 1", drivetrainQuadratureEncoder1);
        drivetrainQuadratureEncoder1.setDistancePerPulse(1.0);
        drivetrainQuadratureEncoder1.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainQuadratureEncoder1.start();
        drivetrainQuadratureEncoder2 = new Encoder(1, 4, 1, 5, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "Quadrature Encoder 2", drivetrainQuadratureEncoder2);
        drivetrainQuadratureEncoder2.setDistancePerPulse(1.0);
        drivetrainQuadratureEncoder2.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainQuadratureEncoder2.start();
        drivetrainUltrasonicSensor = new Ultrasonic(1, 6, 1, 7);
	LiveWindow.addSensor("Drivetrain", "Ultrasonic Sensor", drivetrainUltrasonicSensor);
        
        collectorFeederMotor = new Victor(1, 1);
	LiveWindow.addActuator("Collector", "Feeder Motor", (Victor) collectorFeederMotor);
        
        collectorFeederLimitSwitch = new DigitalInput(1, 14);
	LiveWindow.addSensor("Collector", "Feeder Limit Switch", collectorFeederLimitSwitch);
        
        collectorServo = new Servo(1, 2);
	LiveWindow.addActuator("Collector", "Servo", collectorServo);
        
        shooterTopLimitSwitch = new DigitalInput(1, 13);
	LiveWindow.addSensor("Shooter", "Top Limit Switch", shooterTopLimitSwitch);
        
        shooterLowerLimitSwitch = new DigitalInput(1, 12);
	LiveWindow.addSensor("Shooter", "Lower Limit Switch", shooterLowerLimitSwitch);
        
        shooterDoubleSolenoid1 = new DoubleSolenoid(1, 1, 2);      
	
        
        shooterDoubleSolenoid2 = new DoubleSolenoid(1, 3, 4);      
	
        
        shooterDoubleSolenoid3 = new DoubleSolenoid(1, 5, 6);      
	
        
        shooterReedSwitch1 = new DigitalInput(1, 8);
	LiveWindow.addSensor("Shooter", "Reed Switch 1", shooterReedSwitch1);
        
        shooterReedSwitch2 = new DigitalInput(1, 9);
	LiveWindow.addSensor("Shooter", "Reed Switch 2", shooterReedSwitch2);
        
        shooterReedSwitch3 = new DigitalInput(1, 10);
	LiveWindow.addSensor("Shooter", "Reed Switch 3", shooterReedSwitch3);
        
        shooterReedSwitch4 = new DigitalInput(1, 11);
	LiveWindow.addSensor("Shooter", "Reed Switch 4", shooterReedSwitch4);
        
        shooterShooterPot = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Shooter", "Shooter Pot", shooterShooterPot);
        
        shooterShooterMotor = new Victor(1, 9);
	LiveWindow.addActuator("Shooter", "Shooter Motor", (Victor) shooterShooterMotor);
        
        pneumaticsCompressor = new Compressor(1, 1, 1, 1);
	
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
