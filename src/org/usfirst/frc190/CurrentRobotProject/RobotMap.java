package org.usfirst.frc190.CurrentRobotProject;
import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.DigitalOutput;
//The RobotMap is a mapping from the ports sensors and actuators are wired into
//to a variable name. This provides flexibility changing wiring, makes checking
//the wiring easier and significantly reduces the number of magic numbers
//floating around.
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainFrontLeftCIM;
    public static SpeedController drivetrainFrontRightCIM;
    public static SpeedController drivetrainBackLeftCIM;
    public static SpeedController drivetrainBackRightCIM;
    public static RobotDrive drivetrainRobotDrive4Motors;
    public static Encoder drivetrainDriveEncoder;
    public static Gyro drivetrainGyro;
    public static SpeedController collectorRollerMotor;
    public static DigitalInput collectorBallDetector;
    public static DoubleSolenoid collectorClawPiston;
    public static DigitalInput collectorClawReedSwitch;
    public static DoubleSolenoid shooterShooterPiston1;
    public static DigitalInput shooterPiston1ReedSwitch1;
    public static DigitalInput shooterPiston1ReedSwitch2;
    public static Solenoid shooterShooterPiston2;
    public static Solenoid shooterLatchPiston;
    public static DigitalInput shooterHotGoalSensor;
    public static Compressor pneumaticsCompressor;
    public static DigitalInput pivotTopLimitSwitch;
    public static DigitalInput pivotLowerLimitSwitch;
    public static AnalogChannel pivotPot;
    public static SpeedController pivotMotor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainFrontLeftCIM = new Victor(1, 1);
	LiveWindow.addActuator("Drivetrain", "FrontLeftCIM", (Victor) drivetrainFrontLeftCIM);
        
        drivetrainFrontRightCIM = new Victor(1, 2);
	LiveWindow.addActuator("Drivetrain", "FrontRightCIM", (Victor) drivetrainFrontRightCIM);
        
        drivetrainBackLeftCIM = new Victor(1, 3);
	LiveWindow.addActuator("Drivetrain", "BackLeftCIM", (Victor) drivetrainBackLeftCIM);
        
        drivetrainBackRightCIM = new Victor(1, 4);
	LiveWindow.addActuator("Drivetrain", "BackRightCIM", (Victor) drivetrainBackRightCIM);
        
        drivetrainRobotDrive4Motors = new RobotDrive(drivetrainFrontLeftCIM, drivetrainBackLeftCIM,
              drivetrainFrontRightCIM, drivetrainBackRightCIM);
	
        drivetrainRobotDrive4Motors.setSafetyEnabled(true);
        drivetrainRobotDrive4Motors.setExpiration(0.1);
        drivetrainRobotDrive4Motors.setSensitivity(0.5);
        drivetrainRobotDrive4Motors.setMaxOutput(1.0);
        drivetrainRobotDrive4Motors.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        drivetrainRobotDrive4Motors.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        drivetrainRobotDrive4Motors.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        drivetrainRobotDrive4Motors.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        drivetrainDriveEncoder = new Encoder(1, 1, 1, 2, true, EncodingType.k1X);
	LiveWindow.addSensor("Drivetrain", "Drive Encoder", drivetrainDriveEncoder);
        drivetrainDriveEncoder.setDistancePerPulse(0.0785398);
        drivetrainDriveEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainDriveEncoder.start();
        drivetrainGyro = new Gyro(1, 2);
	LiveWindow.addSensor("Drivetrain", "Gyro", drivetrainGyro);
        drivetrainGyro.setSensitivity(0.007);
        collectorRollerMotor = new Victor(1, 5);
	LiveWindow.addActuator("Collector", "Roller Motor", (Victor) collectorRollerMotor);
        
        collectorBallDetector = new DigitalInput(1, 14);
	LiveWindow.addSensor("Collector", "Ball Detector", collectorBallDetector);
        
        collectorClawPiston = new DoubleSolenoid(1, 7, 8);      
	
        
        collectorClawReedSwitch = new DigitalInput(1, 4);
	LiveWindow.addSensor("Collector", "Claw Reed Switch", collectorClawReedSwitch);
        
        shooterShooterPiston1 = new DoubleSolenoid(1, 4, 5);      
	
        
        shooterPiston1ReedSwitch1 = new DigitalInput(1, 8);
	LiveWindow.addSensor("Shooter", "Piston1 Reed Switch 1", shooterPiston1ReedSwitch1);
        
        shooterPiston1ReedSwitch2 = new DigitalInput(1, 9);
	LiveWindow.addSensor("Shooter", "Piston1 Reed Switch 2", shooterPiston1ReedSwitch2);
        
        shooterShooterPiston2 = new Solenoid(1, 3);
	LiveWindow.addActuator("Shooter", "Shooter Piston 2", shooterShooterPiston2);
        
        shooterLatchPiston = new Solenoid(1, 1);
	LiveWindow.addActuator("Shooter", "Latch Piston", shooterLatchPiston);
        
        shooterHotGoalSensor = new DigitalInput(1, 3);
	LiveWindow.addSensor("Shooter", "Hot Goal Sensor", shooterHotGoalSensor);
        
        pneumaticsCompressor = new Compressor(1, 7, 1, 1);
	
        
        pivotTopLimitSwitch = new DigitalInput(1, 13);
	LiveWindow.addSensor("Pivot", "Top Limit Switch", pivotTopLimitSwitch);
        
        pivotLowerLimitSwitch = new DigitalInput(1, 12);
	LiveWindow.addSensor("Pivot", "Lower Limit Switch", pivotLowerLimitSwitch);
        
        pivotPot = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Pivot", "Pot", pivotPot);
        
        pivotMotor = new Victor(1, 9);
	LiveWindow.addActuator("Pivot", "Motor", (Victor) pivotMotor);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
