//Pneunatics Subsystem
//Baiscally contains just the compressor
package org.usfirst.frc190.CurrentRobotProject.subsystems;
import org.usfirst.frc190.CurrentRobotProject.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc190.CurrentRobotProject.ArduinoComm;
public class Pneumatics extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel pressureSensor = RobotMap.pneumaticsPressureSensor;
    Compressor compressor = RobotMap.pneumaticsCompressor;
    Relay arduinoSignal = RobotMap.pneumaticsArduinoSignal;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Relay lightSignal = RobotMap.pneumaticsLightSignal;
    
    ArduinoComm arduinoComm = ArduinoComm.getInstance();
    double maxPressure = 2.55;
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }
    public void startCompressor() {
        compressor.start();
    }
    
    public boolean isPressurized(){
        return maxPressure <= pressureSensor.getVoltage();
    }
    
    public void writePressure() {
        SmartDashboard.putNumber("Pressure", pressureSensor.getVoltage());
//        arduinoComm.sendMessage((byte) (pressureSensor.getVoltage() * 8.333));
    }
    
    public void setArduinoSignal(boolean signal) {
        if(signal){
            //arduinoComm.sendMessage((byte) 1);
        } else {
            //arduinoComm.sendMessage((byte) 0);
        }
    }
    
    public void checkPressureLights(){
        if(isPressurized()){
            lightSignal.set(Relay.Value.kForward);
        } else {
            lightSignal.set(Relay.Value.kOff);
        }
        //lightSignal.set(Relay.Value.kForward);
    }
}
