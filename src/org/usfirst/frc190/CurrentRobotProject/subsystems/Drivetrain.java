// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc190.CurrentRobotProject.subsystems;
import org.usfirst.frc190.CurrentRobotProject.RobotMap;
import org.usfirst.frc190.CurrentRobotProject.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class Drivetrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController cIM1 = RobotMap.drivetrainCIM1;
    SpeedController cIM2 = RobotMap.drivetrainCIM2;
    SpeedController cIM3 = RobotMap.drivetrainCIM3;
    SpeedController cIM4 = RobotMap.drivetrainCIM4;
    RobotDrive robotDrive4Motors = RobotMap.drivetrainRobotDrive4Motors;
    Encoder leftEncoder = RobotMap.drivetrainLeftEncoder;
    Encoder rightEncoder = RobotMap.drivetrainRightEncoder;
    Ultrasonic distanceSensor = RobotMap.drivetrainDistanceSensor;
    DigitalOutput inPositionIndicator = RobotMap.drivetrainInPositionIndicator;
    Gyro gyro = RobotMap.drivetrainGyro;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveWithJoysticks());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void tankDriveWithJoysitcks(Joystick leftAxis, Joystick rightAxis) {
        robotDrive4Motors.tankDrive(leftAxis, rightAxis);
        //Squared inputs?
    }
    
    public void tankDriveWithValues(double leftAxis, double rightAxis) {
        robotDrive4Motors.tankDrive(leftAxis, rightAxis);
        //Squared inputs?
    }
    
    public double getLeftEncoderDistance(){
        return leftEncoder.getDistance();
    }
    
    public double getRightEncoderDistance(){
        return rightEncoder.getDistance();
    }
    
    public void resetDriveEncoders(){
        leftEncoder.reset();
        rightEncoder.reset();
    }
    
    public double getGyro(){
        return gyro.getAngle();
    }
    
    public void resetGyro(){
        gyro.reset();
    }
    
    public boolean inPosition(double minDist, double maxDist){
        //Convert to feet.
        minDist /= 12;
        maxDist /= 12;
        return (distanceSensor.getRangeInches() <= maxDist && distanceSensor.getRangeInches() >= minDist);
    }
    
    public double getDistanceSensor(){
        return distanceSensor.getRangeInches();
    }
    
    public void setInPosistionIndicator(boolean on){
        //We may possibly have some sort of indicator on the robot for the robot's position.
        inPositionIndicator.set(on);
    }
    
    public void stopDriveMotors(){
        robotDrive4Motors.tankDrive(0, 0);
    }
}
